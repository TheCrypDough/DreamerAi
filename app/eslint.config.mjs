// C:\DreamerAI\app\eslint.config.mjs (REPLACE ENTIRE FILE CONTENT - Attempt 2)

// Note: Using flat config format (.mjs) as generated by ESLint v9 init.
// Importing plugins and using recommended configs.
import js from "@eslint/js";
import globals from "globals";
import pluginReact from "eslint-plugin-react";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginJsxA11y from "eslint-plugin-jsx-a11y";
import pluginImport from "eslint-plugin-import";

export default [
  // Base Recommended ESLint rules
  js.configs.recommended,
  // React recommended configurations
  {
    files: ["**/*.{js,jsx,mjs,cjs}"], // Apply React rules to JS/JSX files
    plugins: {
      react: pluginReact,
      "react-hooks": pluginReactHooks,
      "jsx-a11y": pluginJsxA11y,
      import: pluginImport,
    },
    languageOptions: {
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        ...globals.browser, // Use browser globals
        ...globals.node // Add Node globals if needed for Electron main process files (can be configured per file later)
      }
    },
    settings: {
      react: {
        version: "detect", // Detect React version automatically
      },
      "import/resolver": { // Settings for eslint-plugin-import
        node: {
          extensions: [".js", ".jsx", ".mjs", ".cjs"]
        }
      }
    },
    rules: {
      // Apply recommended rules from plugins
      ...pluginReact.configs.recommended.rules,
      ...pluginReact.configs["jsx-runtime"].rules, // Use new JSX runtime rules
      ...pluginReactHooks.configs.recommended.rules,
      ...pluginJsxA11y.configs.recommended.rules,

      // Custom rule adjustments
      "no-console": process.env.NODE_ENV === "production" ? "warn" : "off",
      "react/prop-types": "off", // Turn off prop-types rule
      "import/no-extraneous-dependencies": ["error", { devDependencies: ["**/*.config.js", "**/*.test.js", "**/*.spec.js", "**/vite.config.*"] }],
      "react/jsx-key": "warn", // Warn instead of error for missing keys
      // Add other specific rule adjustments here as needed
    }
  },
  // Ignore node_modules globally
  {
    ignores: ["node_modules/"],
  }
];