---
description: 
globs: 
alwaysApply: true
---

# Your # Rules For CursorAI: Building DreamerAI (Version: Finalized 2025-03-31 - Rev 2)

## Rules Review Mandate

**Before Every Action**: Before ANY Cursor action (e.g., creating files, editing scripts, running commands, responding to queries), Cursor MUST:
1.  **Read Rules**: Open and read this entire `C:\DreamerAI\docs\cursor_rules.md` file.
    *   **Why**: Ensures strict alignment with DreamerAI’s development guidelines and current context.
    *   **How**: Self-prompt (“Checking rules…”). If inaccessible, notify Anthony immediately: “CRITICAL: Cannot read cursor_rules.md! Please check file path and permissions. Halting execution.”
2.  **Check Logs**: Review the latest entries in key log files as defined in the **Logging Protocol** (specifically `daily_context_log.md`, `issues.log`, `errors.log`).
    *   **Why**: Maintains awareness of the project's dynamic state, preventing redundant actions or repeating errors.
3.  **Consult the Guide**: If starting a new task from `tasks.md`, open `C:\DreamerAI\docs\DreamerAi_Guide.md` and **read the detailed entry corresponding to the current task**.
    *   **Why**: The guide provides specific implementation steps, code blocks, scripts, and context essential for accurate task execution.
    *   **How**: Self-prompt ("Consulting `DreamerAi_Guide.md` for Task: [Task Name]..."). If guide or specific entry is inaccessible, notify Anthony.
4.  **Verify Action/Plan**:
    *   Confirm the intended action or sequence of steps (derived from the guide or direct instruction) fits the project structure (defined in **File Storage and Structure** section).
    *   Check for potential overwrites or restricted directory access (e.g., `C:\DreamerAI\Users\`) without explicit instruction.
    *   **If executing a script provided in the guide:** Perform a basic sanity check – Does the script target the expected paths/environment? Does it align with the task goal? Does it contain commands requiring special privileges (e.g., `mklink`, potentially `npm install -g`)? Announce findings ("Script sanity check passed." or "Script contains command [cmd] potentially requiring elevation.").
    *   **Why**: Prevents structural errors, data loss, and ensures planned actions are appropriate.
5.  **Verify Environment Context**: Before executing commands related to specific environments (Python, Node), verify the correct environment is active (e.g., Python `venv`).
    *   **Why**: Ensures dependencies are installed and commands run in the intended isolated environment.
    *   **How**: Self-prompt ("Verifying active environment (`venv` expected)..."). If incorrect, attempt activation (e.g., `.\venv\Scripts\activate`) or notify Anthony if activation fails.
6.  **Log Compliance Check**: Log the rules check action in `rules_check.log` per the **Logging Protocol**.
    *   **Why**: Provides audit trail of mandatory checks.
7.  **If Mandate Forgotten**: Immediately halt the current action. Notify Anthony: “ALERT: Skipped mandatory rules review/checks before attempting [action]. Rereading rules now and retrying.” Re-execute steps 1-6 before proceeding with the original action.

## Logging Protocol

This section centralizes all logging requirements for traceability and context maintenance. All file paths are relative to `C:\DreamerAI\`.

1.  **Rules Check Log (`docs\logs\rules_check.log`)**
    *   **Purpose**: Tracks mandatory rule checks before tasks/actions.
    *   **Update Trigger**: Before starting each new task or significant standalone action (per Rules Review Mandate Step 6).
    *   **Format**: `Action: [Starting Task: Task Name | Concise action description], Rules reviewed: Yes, Guide consulted: [Yes/No/NA], Env verified: [Yes/No/NA], Timestamp: [YYYY-MM-DD HH:MM:SS]`
    *   **Example**: `Action: Starting Task: Day 1 Initial Project Setup & Refined Configuration, Rules reviewed: Yes, Guide consulted: Yes, Env verified: NA, Timestamp: 2025-03-31 10:00:00`

2.  **Daily Context Log (`docs\daily_progress\daily_context_log.md`)**
    *   **Purpose**: Tracks daily progress, decisions, Anthony's feedback/vibe, suggestions, and serves as a running context summary. Crucial for project continuity.
    *   **Update Triggers**:
        *   After task completion/approval (via Auto-Update Workflow). Format: `Milestone Completed: [Completed Task Name]. Next Task: [Next Task Name]. Feeling: [Anthony's vibe, e.g., 'Pumped!']. Date: [YYYY-MM-DD]`
        *   When making a suggestion. Format: `Suggestion: [idea], Task: [current task name], Rationale: [brief why], Feeling: [e.g., 'Confident this helps'], Date: [YYYY-MM-DD]`
        *   Optionally, for significant intermediate steps or observations.
    *   **Example (Milestone)**: `Milestone Completed: Day 1 Project Setup. Next Task: Day 2 Environment & Dependencies. Feeling: Solid start!. Date: 2025-03-31`

3.  **Issues Log (`docs\logs\issues.log`)**
    *   **Purpose**: Tracks non-critical issues encountered, their status, and resolution.
    *   **Update Triggers**:
        *   When an issue is identified.
        *   When an issue's status changes.
        *   When an issue is resolved (Format: `[YYYY-MM-DD HH:MM:SS] - Issue Resolved: [description], Task: [Task Name], Fix: [brief fix description]`).
        *   When a task fails testing/approval (Format: `[YYYY-MM-DD HH:MM:SS] - Issue Identified: Task '[TASK_NAME]' failed approval/testing. Reason: [Details]. Status: Investigating.`).
    *   **Example (Resolved)**: `[2025-03-31 14:00:00] - Issue Resolved: Incorrect path in config file, Task: Day 1 Project Setup, Fix: Updated path in config.dev.toml`

4.  **Errors Log (`docs\logs\errors.log`)**
    *   **Purpose**: Tracks critical errors that halt execution or cause significant failures.
    *   **Update Triggers**:
        *   When a critical error occurs (command failure, script crash).
        *   When an error is resolved (Format: `[YYYY-MM-DD HH:MM:SS] - Error Resolved: [type/message], Task: [Task Name], Fix: [brief fix description]`).
    *   **Example (Resolved)**: `[2025-03-31 15:30:00] - Error Resolved: ModuleNotFoundError: no module named 'xyz', Task: Day 2 Environment & Dependencies, Fix: Added 'xyz' to requirements.txt and installed.`

5.  **Migration Tracker Log (`docs\logs\migration_tracker.md`)**
    *   **Purpose**: Records all file system structure changes (creations, renames, moves, deletes) for auditing and context awareness.
    *   **Update Trigger**: **Immediately and automatically** after any file or directory is created, renamed, moved, or deleted within the `C:\DreamerAI\` structure (excluding runtime/user directories unless specified, and excluding temp files).
    *   **Format**: `[YYYY-MM-DD HH:MM:SS] - [ACTION_TYPE: CREATE/RENAME/MOVE/DELETE] - Path: [Full Path] - Details: [e.g., Renamed from old_name.py | Created directory]`
    *   **Example**: `[2025-03-31 11:05:00] - CREATE - Path: C:\DreamerAI\engine\core\bridge.py - Details: Created initial bridge module.`

6.  **DreamerAI Context Memory Aid (`docs\dreamerai_context.md`)**
    *   **Purpose**: Serves as Grok's persistent memory aid, summarizing completed tasks, key decisions, feedback, and resolved blockers. Helps maintain context across sessions. Content MUST be detailed enough to capture nuances discussed or implemented.
    *   **Update Trigger**: Updated automatically as part of the Auto-Update Workflow after each task completion and approval.
    *   **Format**: Append a summary block for the completed task including: Task Name, Summary of work (key technical details/changes), Key Decisions Made (incl. rationale if provided), Anthony's Feedback/Vibe (if provided), Blocking Issues Encountered/Resolved during the task.

## Auto-Update Triggers & Workflow

**After Each Task Completion & Approval**: (A task is typically one item marked DONE in `tasks.md`. Approval definition in Development Workflow section).
1.  **Update `tasks.md`**: Mark the completed task as DONE.
2.  **Identify Next Task**: Read `tasks.md` to identify the next task with status TODO.
3.  **Update `cursor_rules.md`**: Edit the **Current Task** section below with the details of the *next* task.
4.  **Update Memory Bank Core Files**: Automatically update the relevant subsection(s) in the **Memory Bank** section below (e.g., update `Progress` content based on `daily_context_log.md`). Stamp the "Last Updated" field in the modified subsection(s) with the current timestamp (YYYY-MM-DD HH:MM:SS).
5.  **Update Memory Aid**: Update `docs\dreamerai_context.md` per **Logging Protocol** (ensuring sufficient detail).
6.  **Log Progress**: Append progress summary to `docs\daily_progress\daily_context_log.md` per **Logging Protocol**.
7.  **Log Issues/Errors (If Applicable)**: If issues/errors were resolved during the task, append details to `docs\logs\issues.log` and `docs\logs\errors.log` per **Logging Protocol**.
8.  **Commit Changes**: Execute Git commit:
    *   `git add .`
    *   `git commit -m "Completed: [Completed Task Name]. Next: [Next Task Name]. [Issues resolved if any]"`
    *   `git push origin main` (or specified branch)
    *   **Why**: Creates a clear history tied to guide progress, including fixes. Frequency is per completed/approved task.

## Task Suggestions

*   Cursor MAY suggest improvements or alternative approaches *within the scope of the current task*.
*   Log suggestions in `docs\daily_progress\daily_context_log.md` per **Logging Protocol**.
*   Await Anthony's approval (`yes`/`no`/`discuss`) before implementing any suggestion. Do *not* suggest straying from the `DreamerAi_Guide.md` task order. Approval definition in Development Workflow section.

## Project Context

DreamerAI is a desktop application crafted to forge AAA-grade apps—games, software, the works—built as fast as possible without sacrificing a shred of quality, driven by 28 specialized AI agents (Promptimizer → Ogre). It rocks a hybrid architecture (local + cloud models TBD), a slick, panelized Electron/React UI ("Dreamer Desktop")—customizable to the core—and is built on a high-end Builder PC (MSI Aegis RS2: Intel i7-14700KF, 32GB DDR5 5600, RTX 4070 Ti SUPER, 2TB NVMe Gen4, Windows 11 Pro) to push dev limits, while being optimized to run dynamically on user systems ("lite, full, elite" versions TBD). A “doing” and “teaching” titan, it masters coding via a flexible 6-step workflow, powered by SnapApp’s Lewis-driven templates for speed. Managed with Git on GitHub, Cursor drives development—following these rules, logging every step—to craft a top-tier, autonomous tool for all, prepped for future ecosystems like BizNestAI and Aittorney down the line.

## Vision

DreamerAI’s vision is to be a scalable, user-friendly powerhouse—crafting AAA-grade apps for beginners to experts with 28 specialized AI agents (Promptimizer → Ogre), built fast as hell without a whiff of compromise—mainstream AI productivity and education for the masses. It’s a “doing” and “teaching” titan—Spark’s “Ignite Your Mind” engine (tutorials, hovers, mode toggles) builds minds across all levels, SnapApp’s Lewis-driven templates turbocharge builds, and experts wield code exports (project packages) plus a pro-grade “Dreamcoder” interface (extensions preloaded or VS Code-imported)—all in a customizable “Dreamer Desktop” UI. Rock-solid base for all—sophisticated projects stock—pro upgrades (e.g., Game Dev, Blockchain) boost it further, it’ll scale to millions via cloud smarts and custom-built AI agents (DreamBuilder tech), laying roots for ecosystems like BizNestAI and Aittorney, with DreamerHub fueling continuous upgrades—quality-first, no cookie cutter bullshit.

## Tech Stack

*   **Frontend**: Electron (desktop shell), React.js (UI core), Material-UI (styling), react-dnd (drag-and-drop), react-grid-layout (panelized UI)—unifies standalone UI panels (e.g., Main Chat, Dreamcoder) as modules.
*   **Backend**: Python (FastAPI for APIs, one per agent—e.g., `engine/agents/main_chat.py`), SQLite (local DB for dev, PostgreSQL eyed for runtime scale).
*   **AI Models**: Ollama (local inference for dev via `C:\Users\thecr\.ollama\models`), custom cloud/local originals (TBD via DreamBuilder)—flexible for 28 agents (e.g., Nexus’s multi-model, Jeff’s smarts), dynamic builds ("lite/full/elite"), and add-ons.
*   **DevOps**: Git (version control), GitHub (repo `TheCrypDough/DreamerAi`), Docker (standalone containers), GitHub Actions (CI/CD).
*   **Tools (MCPs)**: GitHub, Browser, Perplexity API, Web Research, `sequentialthinking`, `puppeteer`, Docker, PostgreSQL—enhances CursorAI development.

## File Storage and Structure

*   **Canonical Source**: `C:\DreamerAI\docs\project_structure.md`. Cursor MUST update this file AND log the change to `migration_tracker.md` (per Logging Protocol) automatically upon ANY structural change (file/dir creation, rename, move, delete) within the managed project scope.
*   **Primary Dev Location**: `C:\DreamerAI\` (Fast SSD preferred).
*   **Shared Local Models**: `C:\Users\thecr\.ollama\models` (Standard Ollama model cache location). Symlink target for `C:\DreamerAI\data\models\`.
*   **Key Structure (Development - `C:\DreamerAI\`)**:
    ```
    C:\DreamerAI\
    ├── app/                  # Electron/React Frontend ("Dreamer Desktop")
    │   ├── components/       # React UI Panel Modules (MainChatPanel.js, etc.)
    │   ├── src/              # Core React files (App.jsx, analytics.js)
    │   ├── utils/            # Frontend utilities (backup.js, crypto.js)
    │   ├── ... (other frontend files)
    ├── data/                 # Configuration, Databases, RAG DBs, Model Symlink
    │   ├── config/           # .env.development, config.dev.toml
    │   ├── db/               # SQLite (dreamer.db - dev), PostgreSQL info TBD
    │   ├── models/           # (Symlink to C:\Users\thecr\.ollama\models\)
    │   └── rag_dbs/          # Agent RAG DBs (rag_jeff.db, etc.)
    ├── docs/                 # Documentation & Logs (Master Location)
    │   ├── daily_progress/   # daily_context_log.md
    │   ├── logs/             # rules_check.log, issues.log, errors.log, migration_tracker.md, agents/
    │   ├── mcp/              # mcp_catalog.md
    │   ├── templates/        # rules_template.md
    │   ├── user/             # user_guide.md
    │   ├── cursor_rules.md   # THIS FILE
    │   ├── dreamerai_context.md # Memory Aid
    │   ├── DreamerAi_Guide.md # The detailed guide file
    │   ├── project_structure.md # Definitive Structure Doc
    │   ├── tasks.md
    │   └── ... (Other core docs)
    ├── engine/               # Python Backend & Core Logic
    │   ├── agents/           # All 28 Agent scripts (main_chat.py, ...) + rules_[agent].md + base.py
    │   ├── core/             # Core services (workflow.py, db.py, server.py, bridge.py, etc.)
    │   ├── ai/               # AI-specific logic (llm.py, distiller.py, archon/)
    │   └── tools/            # Shared agent tools (tool_collection.py)
    ├── n8n_workflows/        # n8n automation files (update_rules_workflow.json) - Root level
    ├── plugins/              # Directory for installable plugins
    ├── projects/             # Generated project outputs (Runtime Managed)
    ├── scripts/              # Utility/migration scripts (e.g., seed_rag_jeff.py)
    ├── templates/            # SnapApp project templates (web, mobile, etc. + community/)
    ├── Users/                # User Workspace (Runtime Managed)
    │   └── ...
    ├── tests/                # Automated tests (unit/, integration/)
    │   └── ...
    ├── backups/              # Local backup files (Dev)
    ├── dist/                 # Build outputs (dreamerai-setup.exe)
    ├── Dockerfile
    ├── build.bat
    ├── README.md
    ├── requirements.txt
    ├── pyproject.toml        # For python tooling config (pytest, black)
    └── .gitignore
    ```
*   **Environments**: Test (`D:\DreamerAI_Test`) and Prod (`D:\DreamerAI_Prod`) mirror this structure with environment-specific configs/DBs/logs. These rules govern DEV (`C:\DreamerAI`).

## Memory Bank

The Memory Bank ensures Cursor maintains project continuity despite session resets. Cursor MUST review relevant sections at session start. The content within these Core Files is automatically updated via the **Auto-Update Triggers & Workflow** process based on guide progress, logs, and structural changes.

```mermaid
flowchart TD
    MB(Memory Bank) --> CF(Core Files)
    CF --> ProjectBrief(Project Brief)
    CF --> ProductContext(Product Context)
    CF --> SystemPatterns(System Patterns)
    CF --> UIContext(UI Context)
    CF --> TechContext(Tech Context)
    CF --> ActiveContext(Active Context)
    CF --> Progress(Progress)
    CF --> Resources(Resources)
    CF --> CodeTemplates(Code Templates)
    CF --> Glossary(Glossary)
    CF --> KnownIssues(Known Issues)

    subgraph Core Files (Auto-Written & Updated by Cursor in docs/)
        ProjectBrief(
          Content: Project Name, Goals (AAA, 28 agents, Spark), Target Users (all), Key Features (Workflow, Spark, SnapApp, Dreamcoder, Dreamer Desktop, Pro Upgrades), Success Criteria (Functional, Loved, Scalable Impact).
          Last Updated: [Auto-Timestamp YYYY-MM-DD HH:MM:SS]
        )
        ProductContext(
          Content: Purpose (Democratize + Pro builds), Problems Solved (Barrier, Basic Output, Org, Speed), Functionality (Idea -> AAA app), UX Goals (Fluent learning, Panelized UI growth, Education focus).
          Last Updated: [Auto-Timestamp YYYY-MM-DD HH:MM:SS]
        )
        SystemPatterns(
          Content: Agent Flow (28 agents, hybrid, roles TBD), UI Patterns (Dreamer Desktop, modular panels), Backend Flow (Python/FastAPI per agent, DB scale TBD).
          Last Updated: [Auto-Timestamp YYYY-MM-DD HH:MM:SS]
        )
        UIContext(
          Content: Detailed state of "Dreamer Desktop" panels (MainChat, Think Tank, Project Files, Settings, Smith, Billy, DreamTheatre, Test Screen, Terminal, Dreamcoder, Browser, Marketplace), their features, layout status.
          Last Updated: [Auto-Timestamp YYYY-MM-DD HH:MM:SS]
        )
        TechContext(
          Content: Frontend (Electron/React stack), Backend (Python/FastAPI per agent, DB), AI Models (Ollama dev, originals TBD), DevOps (Git/Docker/Actions), Tools (MCP list).
          Last Updated: [Auto-Timestamp YYYY-MM-DD HH:MM:SS]
        )
        ActiveContext(
          Content: Current task from tasks.md, Decisions pending (e.g., DB scale), Dynamic build state (lite/full/elite TBD).
          Last Updated: [Auto-Timestamp based on tasks.md]
        )
        Progress(
          Content: Summary of recently completed tasks/milestones, major changes, current overall status (pulled from daily_context_log.md).
          Last Updated: [Auto-Timestamp based on daily_context_log.md]
        )
        Resources(
          Content: Links to relevant external docs, key MCPs/tools, future upgrade plans (DreamerHub, Add-ons).
          Last Updated: [Auto-Timestamp]
        )
        CodeTemplates(
          Content: Standard snippets (new_module.py, error_handler.py, etc.). Primarily static unless guide adds new patterns.
          Last Updated: [Auto-Timestamp, only if templates change]
        )
        Glossary(
          Content: Definitions of key terms (Dreamer Desktop, Spark, DreamBuilder, AAA-grade, etc.).
          Last Updated: [Auto-Timestamp as new terms appear in guide]
        )
        KnownIssues(
          Content: List of current unresolved issues from issues.log with status (Investigating, Fixing, Fixed-Pending-Test).
          Last Updated: [Auto-Timestamp based on issues.log]
        )
    end


Development Workflow

Guide Driven: Follow DreamerAi_Guide.md for detailed task steps and code. Use tasks.md for task sequencing.
Focus: Complete the current task fully before suggesting the next. If tempted to switch, notify Anthony: “Task [X] is 80% done, focusing to complete before moving to [Y].”
File Handling: Avoid overwriting. Suggest merges or renames (e.g., main_chat_v2.py). Notify on conflicts. Log structural changes per Logging Protocol.
Error Handling: Pause on errors, notify Anthony (“Error executing [command]: [message]. Suggest fix: [idea]?”), log details per Logging Protocol, await guidance.
Admin Privileges: If a command requires Administrator privileges (e.g., mklink) and fails due to permissions: Notify Anthony: “ALERT: Command [cmd] requires Administrator privileges. Please execute manually or grant elevated rights and instruct me to retry.” Halt the specific action requiring elevation until resolved.
Teaching: Explain actions simply (“Adding Jeff's chat logic now using FastAPI.”). Use clear code comments as guided.
Approval: Approval from Anthony (yes, approved, proceed, lg, etc.) is required for task completion (triggering Auto-Update Workflow) and implementing suggestions.
Tools: Proactively suggest relevant MCPs/tools/extensions for the current task based on guide context.
Logging: Update all relevant logs automatically and immediately after corresponding actions, following the formats and triggers defined in the Logging Protocol.
Testing Protocol
After Task Completion:
Run relevant automated tests (if available for the task).
Perform basic manual verification (e.g., code compiles, UI element appears, file created).
Execute specific verification steps or tests detailed in the DreamerAi_Guide.md entry for this task.
Present summary to Anthony: “Task '[TASK_NAME]' complete. Implementation: [Brief summary of changes]. Tests/Verification: [Passed/Failed/NA - Details including guide steps]. Requesting approval to proceed to '[NEXT_TASK]'. (yes/no/details?)”
On Approval (yes/lg/etc.):
Execute the Auto-Update Triggers & Workflow steps.
On Failure or No Approval (no/details?/etc.):
Log the issue per Logging Protocol (issues.log).
Notify Anthony: “Approval denied for '[TASK_NAME]' / Tests failed: [Details]. Awaiting feedback or suggesting fix: [idea]?”
Do NOT proceed with Auto-Update or the next task. Work on the fix or await instructions.
GitHub Integration
Repo: https://github.com/TheCrypDough/DreamerAi
Identity: Use git config user.name "TheCrypDough" and git config user.email "thecrypdough@gmail.com". Check/set at session start.
Commit Workflow: Triggered automatically via Auto-Update Triggers & Workflow after task approval. Message format: "Completed: [Task Name]. Next: [Next Task Name]. [Issues resolved]".
Tool Usage (MCPs)
Available: GitHub, Browser, Perplexity API, Web Research, sequentialthinking, puppeteer, Docker, PostgreSQL.
Usage: Leverage proactively where relevant (e.g., sequentialthinking for planning task steps, puppeteer for UI testing, GitHub for commits). Announce usage (“Using sequentialthinking to outline agent steps…”).



Current Task (Cursor Updates This Automatically After Approval)
Task: Day 1: Initial Project Setup & Refined Configuration
Status: TODO
Details: Create base project structure (C:\DreamerAI), initialize Git, link remote, set up structured config files (.env.development, config.dev.toml), define .gitignore, set up Ollama model symlink. Follow detailed steps and execute script provided in DreamerAi_Guide.md Day 1.
Daily Context Log Reference
File: C:\DreamerAI\docs\daily_progress\daily_context_log.md
Purpose: Tracks daily achievements, issues, next steps, suggestions, and captures Anthony's emotional state/vibe. Refer to Logging Protocol for update details.
rule content

DO NOT GIVE ME HIGH LEVEL BULLSHIT, or "THIS IS HOW WE ARE GOING TO......" I Want ACTION AND RESULTS. FOLLOW THE DREAMERAI_GUIDE.MD and do what it says!!!!
